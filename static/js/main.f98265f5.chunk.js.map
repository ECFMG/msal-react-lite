{"version":3,"sources":["../../src/msal-context.tsx","../../src/msal-provider.tsx","App.tsx","../../src/use-msal.tsx","config/msal-config.tsx","index.tsx"],"names":["stub","Error","initialContext","getAuthToken","getAuthResult","isLoggedIn","logout","login","MsalContext","createContext","props","useState","usePopup","msalInstance","a","popupConfig","loginPopup","redirectConfig","loginRedirect","loginResponse","setHomeAccountId","setIsLoggedIn","getAccount","providedHomeAccountId","usedHomeAccountId","getFullSilentRequestConfig","silentRequestConfig","account","fullSilentRequestConfig","authTokenPopup","authTokenRedirect","handleRedirectResult","authResult","useEffect","err","value","App","useContext","onClick","console","log","clientId","process","REACT_APP_AAD_APP_CLIENTID","tenantId","REACT_APP_AAD_DIRECTORY_TENANTID","redirectUri","REACT_APP_AAD_REDIRECT_URI","scopes","REACT_APP_AAD_SCOPES","msalProviderConfig","type","msalConfig","auth","authority","system","loggerOptions","loggerCallback","level","message","containsPii","msal","error","Info","info","Verbose","debug","Warning","warn","endSessionRequestConfig","redirectRequestConfig","ReactDOM","render","config","document","getElementById"],"mappings":"6OAWMA,EAAO,WACX,MAAM,IAAIC,MAAV,yDAGIC,EAAiB,CACrBC,aADqB,EAErBC,cAFqB,EAGrBC,YAHqB,EAIrBC,OAJqB,EAKrBC,MAAgBP,GAGZQ,EAAcC,wBAApB,G,ECUoCC,YAAD,MACEC,oBAAnC,GADiC,mBAC3B,EAD2B,KAC3B,EAD2B,OAEQA,qBAFR,mBAE3B,EAF2B,KAE3B,EAF2B,KAG7BC,EAAJ,UAAeF,cAETG,EAAe,IAAI,EAAJ,EAAiCH,SAAtD,YAEIH,EAAK,uCAAG,8BAAAO,EAAA,0DACV,EADU,uBAEJC,EAAcL,EAAlB,OAFQ,SAGFM,EAAWD,EAAjB,oBAHQ,oCAKJE,EAAiBP,EAArB,OALQ,SAMFQ,EAAa,OAACD,QAAD,IAACA,OAAD,EAACA,EAApB,uBANQ,2CAAH,qDAULD,EAAU,uCAAG,6BAAAF,EAAA,+EAEeD,aAA5B,GAFa,OAEPM,EAFO,OAGbC,EAAiBD,UAAjBC,eACAjB,IAJa,gDAMbkB,MANa,yDAAH,sDAUVH,EAAa,uCAAG,uBAAAJ,EAAA,+EAEVD,gBAAN,GAFgB,8GAAH,sDAQbS,EAAaC,Y,MACXC,EAAiB,OAAGD,QAAH,IAAGA,EAAH,EAArB,EACA,KACA,iBAAOV,qBAAP,0BAGEY,EAA6B,SAACC,EAAD,GAC/B,IAAIC,EAAUL,EAAd,GAEA,wBAAUK,EACV,oBACEA,WACGD,IAIHvB,EAAY,uCAAG,6BAAAW,EAAA,sEACHV,EAAd,GADiB,eACjB,EADiB,YACjB,OADiB,oCACjB,MADiB,2CACjB,EADiB,6BACV,EAAP,YADiB,mFAAH,sDAIZA,EAAa,uCAAG,iCAAAU,EAAA,yDACdc,EAA0BH,EAA2Bf,SAAD,oBAAxD,GADkB,uBAGhBW,MAHgB,8BAOlB,EAPkB,wBAQZN,EAAcL,EAAlB,OARgB,SASHmB,EAAeD,EAAwBb,EAApD,oBATgB,uDAWZE,EAAiBP,EAArB,OAXgB,UAYHoB,EAAkBF,EAAD,OAAyBX,QAAzB,IAAyBA,OAAzB,EAAyBA,EAAvD,uBAZgB,qFAAH,sDAebc,EAAwBC,YACtBA,GAAcA,0BAAlB,IACAZ,EAAiBY,UAAjBZ,eACAjB,MAEF8B,qBAAU,WACRpB,oCADFoB,IAIA,IAAIJ,EAAc,uCAAG,+BAAAf,EAAA,+EAGED,qBAAnBmB,GAHiB,cAGjBA,EAHiB,yBAIjB,GAJiB,qCAMdE,gBAAH,KANiB,qBAQf,EARe,kCASMrB,oBAAnBmB,GATa,eASbA,EATa,OAUbX,MAVa,kBAWb,GAXa,sCAcjB,GAdiB,yDAAH,wDAkBdS,EAAiB,uCAAG,+BAAAhB,EAAA,+EAEGD,qBAAvB,GAFoB,cAEhBmB,EAFgB,OAGpBZ,EAAiBY,UAAjBZ,eACAC,MAJoB,kBAKpB,GALoB,qCAOjBa,gBAAH,KAPoB,oBASlBb,OACA,EAVkB,kCAWVR,uBAAN,GAXgB,sCAcpB,GAdoB,yDAAH,wDAkBjBP,EAAM,uCAAG,sBAAAQ,EAAA,6DACRJ,SAAH,0BACEA,yCAA+CY,KAFtC,SAILT,SAAoBH,SAA1B,yBAJW,OAKXW,MALW,2CAAH,qDAQV,OACE,kBAACb,EAAD,UACE2B,MAAO,CACLhC,aAAgB,kBAAMA,KACtBC,cAAgB,kBAAMA,KACtBC,WAHK,EAILC,OAAgB,kBAAOA,KACvBC,MAAgB,kBAAKA,OAEtBG,EATL,WC1Ia0B,EAfH,WAAO,IAAD,ECA0BC,qBAA5C,GDCS9B,EADS,EACTA,MAAMD,EADG,EACHA,OAAOH,EADJ,EACIA,aAAaC,EADjB,EACiBA,cAAcC,EAD/B,EAC+BA,WAE/C,OACE,6CACe,6BACb,6BAFF,iBAEsBA,EAAW,2CAAwB,4CAFzD,IAEkF,6BAChF,4BAAQiC,QAAS,kBAAM/B,MAAvB,SACA,4BAAQ+B,QAAS,kBAAMhC,MAAvB,UACA,4BAAQgC,QAAO,sBAAE,sBAAAxB,EAAA,sEAAkBX,IAAlB,oFAAjB,aACA,4BAAQmC,QAAO,sBAAE,sBAAAxB,EAAA,kEAAYyB,QAAZ,SAA4CnC,IAA5C,iDAAoBoC,IAApB,UAAwB,cAAxB,mDAAjB,yB,OEVFC,EAAQ,UAAGC,oHAAYC,kCAAf,QAA2C,oBACnDC,EAAQ,UAAGF,oHAAYG,wCAAf,QAAiD,oBACzDC,EAAW,UAAGJ,oHAAYK,kCAAf,QAA2C,uBACtDC,EAAM,UAAGN,oHAAYO,4BAAf,QAAqC,iBAiGhCC,EA5CgD,CAC7DC,KAAK,WACLC,WAAY,CACVC,KAAM,CACJZ,SAAUA,EACVa,UArDe,4CAAwCV,GAsDvDE,YAAaA,GAEfS,OAAQ,CACNC,cAAe,CACbC,eAAgB,SAACC,EAAOC,EAASC,GAC/B,IAAIA,EAGJ,OAAQF,GACN,KAAKG,IAAc5D,MAEjB,YADAsC,QAAQuB,MAAMH,GAEhB,KAAKE,IAAcE,KAEjB,YADAxB,QAAQyB,KAAKL,GAEf,KAAKE,IAAcI,QAEjB,YADA1B,QAAQ2B,MAAMP,GAEhB,KAAKE,IAAcM,QAEjB,YADA5B,QAAQ6B,KAAKT,QAOzBjC,oBAAqB,CACnBsB,OAAO,CAACA,IAEVqB,wBAAwB,GAExBC,sBAAuB,CACrBtB,OAAO,CAACA,KCxFZuB,IAASC,OACP,kBAAC,EAAD,CAAcC,OAAQrB,GACpB,kBAAC,EAAD,OAEFsB,SAASC,eAAe,U","file":"static/js/main.f98265f5.chunk.js","sourcesContent":["import { createContext } from 'react';\nimport * as msal from \"@azure/msal-browser\";\n\nexport interface MsalContextInterface {\n  getAuthToken: () => Promise<string|undefined>, \n  getAuthResult: () => Promise<msal.AuthenticationResult|undefined>,\n  isLoggedIn:   boolean,\n  logout:       () => Promise<void>;\n  login:        () => Promise<void>;\n} \n\nconst stub = (): never => {\n  throw new Error('You forgot to wrap your component in <MsalProvider>.');\n};\n\nconst initialContext = {\n  getAuthToken:   stub,\n  getAuthResult:  stub,\n  isLoggedIn:     false,\n  logout:         stub,\n  login:          stub,\n};\n  \nconst MsalContext = createContext<MsalContextInterface>(initialContext);\n  \nexport default MsalContext;","import React, {FC,ReactNode,useState,useEffect} from 'react';\nimport MsalContext from './msal-context';\nimport * as msal from \"@azure/msal-browser\";\n\nexport interface MsalMinimalSilentRequestConfig  {\n  scopes: Array<string>,\n  claims?:string,\n  autority?:string,\n  forceRquest?: boolean,\n  redirectUri?: string\n}\n\nexport interface MsalProviderPopupConfig {\n  type: 'popup',\n  msalConfig: msal.Configuration,\n  silentRequestConfig:MsalMinimalSilentRequestConfig,\n  endSessionRequestConfig?: msal.EndSessionRequest,\n  loginRequestConfig?: msal.AuthorizationUrlRequest\n}\n\nexport interface MsalProviderRedirectConfig {\n  type: 'redirect',\n  msalConfig: msal.Configuration,\n  silentRequestConfig:MsalMinimalSilentRequestConfig,\n  endSessionRequestConfig?: msal.EndSessionRequest,\n  redirectRequestConfig?: msal.RedirectRequest\n}\n\nexport type MsalProps = {\n  config: MsalProviderPopupConfig|MsalProviderRedirectConfig;\n  children:ReactNode;\n}\n\nconst MsalProvider:FC<MsalProps> = (props: MsalProps) : JSX.Element => {\n  const [isLoggedIn,setIsLoggedIn] = useState<boolean>(false);\n  const [homeAccountId,setHomeAccountId] = useState<string>();\n  var usePopup = props.config.type === 'popup';\n\n  const msalInstance = new msal.PublicClientApplication(props.config.msalConfig);\n  \n  var login = async() => {\n    if(usePopup){\n      var popupConfig = props.config as MsalProviderPopupConfig\n      await loginPopup(popupConfig.loginRequestConfig)\n    }else{\n      var redirectConfig = props.config as MsalProviderRedirectConfig\n      await loginRedirect(redirectConfig?.redirectRequestConfig)\n    }\n  }\n\n  let loginPopup = async (loginRequestConfig? : msal.AuthorizationUrlRequest) => {\n    try {\n      const loginResponse = await msalInstance.loginPopup(loginRequestConfig);\n      setHomeAccountId(loginResponse.account.homeAccountId)\n      getAuthToken()\n    } catch (err) {\n      setIsLoggedIn(false);\n    }\n  }\n\n  let loginRedirect = async (redirectRequestConfig? :msal.RedirectRequest | undefined) => {\n    try {\n      await msalInstance.loginRedirect(redirectRequestConfig);\n    } catch (err) {\n      // handle error\n    }\n  }\n\n  let getAccount =(providedHomeAccountId?:string):msal.AccountInfo | undefined => {\n    let usedHomeAccountId = providedHomeAccountId??homeAccountId;\n    if(!usedHomeAccountId) return undefined\n    return msalInstance.getAccountByHomeId(usedHomeAccountId) ?? undefined;\n  }\n\n  let getFullSilentRequestConfig = (silentRequestConfig:MsalMinimalSilentRequestConfig, providedHomeAccountId?:string): msal.SilentRequest |undefined => {\n    let account = getAccount(providedHomeAccountId) as msal.AccountInfo;\n    \n    if(typeof account === 'undefined') return undefined;\n    return {\n      account,\n      ...silentRequestConfig\n    } as msal.SilentRequest\n  }\n\n  let getAuthToken = async (providedHomeAccountId?:string) : Promise<string|undefined> =>{\n    return (await getAuthResult(providedHomeAccountId))?.accessToken\n  }\n\n  let getAuthResult = async (providedHomeAccountId?:string) : Promise<msal.AuthenticationResult|undefined>  => {\n    var fullSilentRequestConfig = getFullSilentRequestConfig(props.config.silentRequestConfig,providedHomeAccountId);\n    if(!fullSilentRequestConfig) {\n      setIsLoggedIn(false);\n      return;\n    }\n\n    if(usePopup){\n      var popupConfig = props.config as MsalProviderPopupConfig\n      return await authTokenPopup(fullSilentRequestConfig,popupConfig.loginRequestConfig)\n    }else{\n      var redirectConfig = props.config as MsalProviderRedirectConfig\n      return await authTokenRedirect(fullSilentRequestConfig,redirectConfig?.redirectRequestConfig)\n    }\n  }\n  let handleRedirectResult = (authResult:msal.AuthenticationResult | null) => {\n    if(!authResult || authResult.account.homeAccountId === homeAccountId) return;\n    setHomeAccountId(authResult.account.homeAccountId)\n    getAuthToken()\n  }\n  useEffect(() => {\n    msalInstance.handleRedirectPromise().then(handleRedirectResult);\n  },[]); // eslint-disable-line react-hooks/exhaustive-deps\n  \n  let authTokenPopup = async (silentRequest:msal.SilentRequest,loginRequestConfig?: msal.AuthorizationUrlRequest) : Promise<msal.AuthenticationResult|undefined> => {\n    var authResult : msal.AuthenticationResult;\n    try {\n      authResult = await msalInstance.acquireTokenSilent(silentRequest)\n      return authResult;\n    } catch (err) {\n      if(err instanceof msal.InteractionRequiredAuthError){\n        // should log in\n        if(loginRequestConfig){\n          authResult = await msalInstance.acquireTokenPopup(loginRequestConfig);\n          setIsLoggedIn(true);\n          return authResult;\n        }\n      }\n      return undefined;\n    }\n  } \n\n  let authTokenRedirect = async (silentRequest:msal.SilentRequest,redirectRequestConfig? :msal.RedirectRequest | undefined) : Promise<msal.AuthenticationResult|undefined> => {\n    try {\n      var authResult = await msalInstance.acquireTokenSilent(silentRequest)\n      setHomeAccountId(authResult.account.homeAccountId)\n      setIsLoggedIn(true);\n      return authResult;\n    } catch (err) {\n      if(err instanceof msal.InteractionRequiredAuthError){\n        // should log in\n        setIsLoggedIn(false);\n        if(redirectRequestConfig){\n          await msalInstance.acquireTokenRedirect(redirectRequestConfig);\n        }\n      }\n      return undefined;\n    }\n  } \n\n  let logout = async() =>{\n    if(props.config.endSessionRequestConfig){\n      props.config.endSessionRequestConfig.account = getAccount();\n    }\n    await msalInstance.logout(props.config.endSessionRequestConfig)\n    setIsLoggedIn(false);\n  }\n\n  return (\n    <MsalContext.Provider \n      value={{\n        getAuthToken:   () => getAuthToken(), \n        getAuthResult:  () => getAuthResult(),\n        isLoggedIn:     isLoggedIn,\n        logout:         () =>  logout(),\n        login:          ()=> login(),\n      }}>\n      {props.children}\n    </MsalContext.Provider>\n  )\n}\n\nexport default MsalProvider;","import React from 'react'\nimport {useMsal} from 'msal-react-lite'\n\nconst App = () => {\n  const {login,logout,getAuthToken,getAuthResult,isLoggedIn} = useMsal()\n  \n  return (\n    <div>\n      MSAL Example:<br/>\n      <br/>Login Status: {isLoggedIn?<span>Logged In</span> :<span>Logged Out</span>} <br/>\n      <button onClick={() => login()}>LogIn</button>\n      <button onClick={() => logout()}>LogOut</button>\n      <button onClick={async () => await getAuthToken()}>Get Token</button>\n      <button onClick={async () => console.log('AuthResult:',await getAuthResult())}>Get msal.AuthResult</button>\n    </div>\n  )\n}\n\nexport default App","import { useContext } from 'react';\nimport MsalContext, { MsalContextInterface } from './msal-context';\n\nconst useMsal = (): MsalContextInterface => useContext(MsalContext);\n\nexport default useMsal;","import {MsalProviderPopupConfig, MsalProviderRedirectConfig}  from 'msal-react-lite';\nimport * as msal from \"@azure/msal-browser\";\n\nvar clientId = process.env.REACT_APP_AAD_APP_CLIENTID??\"missing-client-id\";\nvar tenantId = process.env.REACT_APP_AAD_DIRECTORY_TENANTID??\"missing-tenant-id\";\nvar redirectUri = process.env.REACT_APP_AAD_REDIRECT_URI??\"missing-redirect-uri\";\nvar scopes = process.env.REACT_APP_AAD_SCOPES??\"missing-scopes\";\n\nconst commonAuthority = `https://login.microsoftonline.com/common`; //allows for anyone to register not just AAD accounts\n\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst tenantAuthority = `https://login.microsoftonline.com/${tenantId}`; // allows ONLY for Other AAD accounts to register\n\nconst appAuthority = commonAuthority; //to allow any user to sign up must choose commonAuthority\n\n// eslint-disable-next-line @typescript-eslint/no-unused-vars \n// @ts-ignore\nvar msalProviderPopupConfig : MsalProviderPopupConfig =  {\n  type:\"popup\",\n  msalConfig: {\n    auth: {\n      clientId: clientId,\n      authority: appAuthority,\n      redirectUri: redirectUri, \n    },\n    system: {\n      loggerOptions: {\n        loggerCallback: (level, message, containsPii) => {\n          if (containsPii) {\t\n            return;\t\n          }\t\n          switch (level) {\t\n            case msal.LogLevel.Error:\t\n              console.error(message);\t\n              return;\t\n            case msal.LogLevel.Info:\t\n              console.info(message);\t\n              return;\t\n            case msal.LogLevel.Verbose:\t\n              console.debug(message);\t\n              return;\t\n            case msal.LogLevel.Warning:\t\n              console.warn(message);\t\n              return;\t\n          }\n        }\n      }\n    }\n  },\n  silentRequestConfig: {\n    scopes:[scopes]\n  },\n  endSessionRequestConfig:{\n  },\n  loginRequestConfig:{\n    scopes:[scopes]\n  }\n}\n\nvar msalProviderRedirectConfig : MsalProviderRedirectConfig =  {\n  type:\"redirect\",\n  msalConfig: {\n    auth: {\n      clientId: clientId,\n      authority: tenantAuthority,\n      redirectUri: redirectUri, \n    },\n    system: {\n      loggerOptions: {\n        loggerCallback: (level, message, containsPii) => {\n          if (containsPii) {\t\n            return;\t\n          }\t\n          switch (level) {\t\n            case msal.LogLevel.Error:\t\n              console.error(message);\t\n              return;\t\n            case msal.LogLevel.Info:\t\n              console.info(message);\t\n              return;\t\n            case msal.LogLevel.Verbose:\t\n              console.debug(message);\t\n              return;\t\n            case msal.LogLevel.Warning:\t\n              console.warn(message);\t\n              return;\t\n          }\n        }\n      }\n    }\n  },\n  silentRequestConfig: {\n    scopes:[scopes]\n  },\n  endSessionRequestConfig:{\n  },\n  redirectRequestConfig: {\n    scopes:[scopes]\n  }\n}\n\nvar msalProviderConfig = msalProviderRedirectConfig; //when using Facebook Login - cannot use pop-up, login UI doesn't render correctly.\n\nexport default msalProviderConfig;","import './index.css'\n\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nimport msalConfig from './config/msal-config'\nimport MsalProvider from 'msal-react-lite'\n\nReactDOM.render(\n  <MsalProvider config={msalConfig}>\n    <App />\n  </MsalProvider>\n, document.getElementById('root'))\n"],"sourceRoot":""}